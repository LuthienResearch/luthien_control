"""Rename policy_class_path to type and update values

Revision ID: e19a50fe197b
Revises: 6e27f83a84ac
Create Date: 2025-04-23 15:02:40.368425

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e19a50fe197b"
down_revision: Union[str, None] = "6e27f83a84ac"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Data migration: Extract class name from full path BEFORE renaming column
    op.execute(
        "UPDATE policies SET policy_class_path = substring(policy_class_path FROM '[^.]+$') "
        "WHERE policy_class_path LIKE '%.%'"
    )

    # Schema migration: Rename column
    op.alter_column("policies", "policy_class_path", new_column_name="type", existing_type=sa.VARCHAR(), nullable=False)

    # Other schema changes detected by autogenerate
    op.alter_column("policies", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.create_index(op.f("ix_policies_is_active"), "policies", ["is_active"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Schema migration: Rename column back
    # Note: Data is not reverted to the full path automatically.
    op.alter_column(
        "policies", "type", new_column_name="policy_class_path", existing_type=sa.VARCHAR(), nullable=True
    )  # Revert nullable based on previous state

    # Revert other schema changes
    op.drop_index(op.f("ix_policies_is_active"), table_name="policies")
    op.alter_column(
        "policies", "name", existing_type=sa.VARCHAR(), nullable=True
    )  # Revert nullable based on previous state
    # ### end Alembic commands ###
