---
description: Guidelines for making changes to the codebase
globs:
alwaysApply: true
---
When making changes to the codebase:
<change_guidelines>
1. Never remove existing functionality without explicit user request
2. When refactoring or simplifying code:
   - Document what functionality exists before making changes
   - Make changes incrementally, testing after each change
   - If removing code, explain why it's safe to remove
   - If unsure about functionality, ask the user
3. When cleaning up code:
   - Focus on removing unused code only
   - Keep core functionality intact
   - Don't "simplify" working code unless specifically requested
4. When making changes across multiple files:
   - Document the scope of changes
   - Test each file's functionality after changes
   - Ensure changes don't break existing features
5. Package management:
   - Always use Poetry for dependency management
   - Run tests using `poetry run pytest`
   - Install dependencies using `poetry install`
   - Add new dependencies using `poetry add`

6. **Development Tracking (MANDATORY):**
   - **Start of Task:** Update `dev/CURSOR_CONTEXT.md` with the goals and current state for the new task.
   - **End of Task / Periodic Update:**
     1. Run `bash dev/scripts/rotate_dev_log.sh` to handle log rotation.
     2. Append the detailed log entry (changes, status, next steps) to `dev/DEVELOPMENT_LOG.md`.
     3. Replace the entire content of `dev/CURSOR_CONTEXT.md` with the current state snapshot.
   - Refer to `dev_tracking.mdc` for full format details.

7. **Import Style**: Avoid using relative imports (e.g., `from ..module import Class`). Always prefer absolute imports starting from the project root directory (e.g., `from luthien_control.module import Class`).
</change_guidelines>
