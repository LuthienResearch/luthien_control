name: Code Quality & Tests

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    permissions:
      contents: write       # Needed for coverage data branch
      pull-requests: write  # Needed for coverage comments
      actions: read         # Needed to read workflow information
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: luthien_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }} # Checkout the PR branch

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml' # Use pyproject.toml directly

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev # Ensure dev dependencies (ruff, pyright) are installed

      - name: Install project (if not installed by dev dependencies)
        run: poetry install --no-interaction --no-root # Ensures project itself is importable by pyright if needed

      - name: Apply ruff formatting
        run: poetry run ruff format .

      - name: Apply ruff auto-fixes
        run: poetry run ruff check . --fix --exit-zero

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: Apply ruff formatting and fixes"
          branch: ${{ github.head_ref }} # Push to the PR branch
          commit_options: '--no-verify --signoff'
          file_pattern: '*.py' # Only commit python files
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Check for remaining ruff issues
        run: poetry run ruff check .

      - name: Run Pyright type check
        run: poetry run pyright

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/luthien_test
        run: |
          poetry run pytest --cov=luthien_control --cov-report=html --cov-report=xml --cov-report=term-missing | tee pytest-output.log
          COVERAGE=$(grep "TOTAL" pytest-output.log | awk '{print $4}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "Current coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "Coverage report generated. See artifacts for detailed HTML report." >> $GITHUB_STEP_SUMMARY

      - name: Debug coverage files
        run: |
          echo "=== Coverage files in workspace ==="
          ls -la .coverage* 2>/dev/null || echo "No .coverage files found"
          echo "=== HTML coverage directory ==="
          ls -la htmlcov/ 2>/dev/null || echo "No htmlcov directory found"
          echo "=== Working directory ==="
          pwd
          ls -la

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
            pytest-output.log
          retention-days: 30

      - name: Coverage comment on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERAGE_PATH: .
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 70
          COMMENT_TEMPLATE: |
            {% extends "base" %}
            {% block footer %}
            
            ---
            
            ðŸ“Š **[View Detailed Coverage Report](https://github.com/LuthienResearch/luthien_control/actions)** | ðŸŒ¿ **[Browse Coverage Data Branch](https://github.com/LuthienResearch/luthien_control/tree/python-coverage-comment-action-data)**
            {% endblock footer %}