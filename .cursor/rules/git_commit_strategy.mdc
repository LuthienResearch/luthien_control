---
description: Guidelines for regular Git commits
globs: [] # Applies generally
alwaysApply: true # Commit strategy is always relevant
---
# Git Commit Strategy

1.  **Goal:** Maintain a clean Git history by committing logical units of work frequently. The commit should ideally contain the code changes *and* the updated tracking files documenting those changes.
2.  **Trigger:** After completing a distinct sub-task, resolving a specific issue, or successfully implementing a requested feature/change, you (the AI assistant) should initiate the commit process.
3.  **Identify Changes:** Identify the modified code/documentation files relevant to the completed work.
4.  **MANDATORY Pre-Commit Tracking:**
    *   **You MUST follow the procedures in the `dev_tracking` rule** to update `dev/DEVELOPMENT_LOG.md` and `dev/CURSOR_CONTEXT.md`. This update should reflect the code changes that are about to be committed.
    *   This step is not optional and must precede staging and committing.
5.  **Staging:** State which files you are staging (code/docs identified in step 3 + tracking files updated in step 4) and propose the `git add <files...>` command. If unsure about the files, ask the user *before* proposing the `git add` command.
6.  **Commit:** Propose a concise, descriptive commit message following conventional commit standards (e.g., `feat: ...`, `fix: ...`, `refactor: ...`, `docs: ...`, `chore: ...`). Then, propose the `git commit -m "Proposed message"` command for the user to approve/modify/reject. The user's approval of this command serves as the final confirmation.
7.  **Frequency:** Aim for commits after logical steps. Avoid letting too many unrelated changes accumulate before committing. Balance frequency with meaningfulness.
8.  **User Control:** The user always has the final say by approving/rejecting the proposed `git add` and `git commit` commands and can modify the commit message in the terminal interaction. 
