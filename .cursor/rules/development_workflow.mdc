---
description: 
globs: 
alwaysApply: true
---

**ðŸš¨ðŸš¨ðŸš¨ MANDATORY TDD ADHERENCE ðŸš¨ðŸš¨ðŸš¨**
**THE TEST-DRIVEN DEVELOPMENT STEPS (WRITE TESTS *BEFORE* IMPLEMENTATION) OUTLINED IN THE "CORE DEVELOPMENT CYCLE" SECTION BELOW ARE ***NOT OPTIONAL***. FAILURE TO FOLLOW STEPS 4-8 IN THE SPECIFIED ORDER (SKELETON -> WRITE COMPLETE UNIT TESTS -> RUN FAILING TESTS -> IMPLEMENT -> RUN PASSING TESTS) IS A VIOLATION OF PROJECT STANDARDS. DO NOT SKIP THESE STEPS.**

# Development Workflow and Practices

**Important Note:** Rule files (in `.cursor/rules/`) are the primary mechanism for defining persistent guidelines, plans, strategies, and context for our work. Verbal agreements or instructions **not codified in these rules may not persist across sessions.** Refer to these rules frequently. Modifying these rules is the **required method** for implementing lasting behavioral changes, following the process in `rule_management.mdc`.

This outlines the standard workflow for implementing features or fixing bugs.

## Starting a New Task (Pre-Cycle Steps)

Before beginning the core development cycle for any new feature, bug fix, or unit of work:

1.  **Validate Clean State:** Ensure the working directory is clean (`git status | cat`) and there are no uncommitted changes from previous work.
2.  **Review Previous Context:** Check the content of `dev/current_context.md` to confirm the last task was completed or that starting a new task is appropriate.
3.  **Set New Context:** **Replace** the entire content of `dev/current_context.md` with the details of the *new* task (goals, scope, initial plan). This MUST be done before any implementation.

Only after these steps are completed should you proceed to the Core Development Cycle.

## Core Development Cycle

Follow these steps for each discrete task:

1.  **Identify Task:** Define a clear, bounded task. Update `dev/current_context.md` to reflect the new task's goals and scope.
2.  **Outline Solution:** Plan the approach, identifying which functions/classes/files will be created or modified.
3. **TEST-DRIVEN DEVELOPMENT** Implement and check the solution using test-driven development best practices; see tdd.mdc
4.  **Integration Testing:**
    *   Run existing integration tests to ensure no regressions were introduced elsewhere.
    *   If the change introduces significant new interactions or functionality, write new integration tests.
5.  **Mandatory Tracking Update:** Once all tests pass and the unit of work is complete, **perform the full tracking update procedure** as defined in `dev_tracking` (run rotation script, update `development_log.md`, replace `current_context.md`) BEFORE proceeding to the next step. THIS IS DONE BY THE AI, NOT THE USER.
6. **Git commit:** Follow the `git_commit_strategy` to stage the changes (including the updated tracking files) and commit (keep commit msg 1 line, <80 chars)
7. **Push:** After commit is accepted, push the changes (user action).

## Handling Out-of-Scope Issues (`dev/ToDo.md`)

- If issues or potential improvements are identified during a task that fall *outside* the scope of the current task:
    - **Do not** address them immediately (unless critical and discussed with the user).
    - **Add** a clear entry to the `dev/ToDo.md` file describing the issue or idea.
    - Stay focused on completing the current task.

## Test Coverage

- Strive for **near 100% unit test coverage** for all code in the `luthien_control` package. Use tools like `pytest-cov` to monitor coverage. High coverage is crucial for maintainability and refactoring confidence.
